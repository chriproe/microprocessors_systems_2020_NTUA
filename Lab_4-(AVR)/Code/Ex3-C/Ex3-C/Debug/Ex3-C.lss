
Ex3-C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000000f6  0000016a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000019c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005cd  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000054e  00000000  00000000  000007c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000022b  00000000  00000000  00000d13  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000f40  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000310  00000000  00000000  00000f64  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00001274  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ef       	ldi	r30, 0xF6	; 246
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 79 00 	jmp	0xf2	; 0xf2 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:

char x = 1;

int main(void)
{
	DDRC = 0x00;  // Αρχικοποίηση PORTC ως input
  82:	14 ba       	out	0x14, r1	; 20
	DDRA = 0xFF; // Αρχικοποίηση PORTA ως output
  84:	8f ef       	ldi	r24, 0xFF	; 255
  86:	8a bb       	out	0x1a, r24	; 26
	PORTA = x;  //  Θέτουμε output το x
  88:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  8c:	8b bb       	out	0x1b, r24	; 27

    while (1) 
    {
		if(PINC == 1)  {       // Push Button SW0
  8e:	83 b3       	in	r24, 0x13	; 19
  90:	81 30       	cpi	r24, 0x01	; 1
  92:	61 f4       	brne	.+24     	; 0xac <main+0x2a>
			if  (x==128) x=1;
  94:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  98:	80 38       	cpi	r24, 0x80	; 128
  9a:	21 f4       	brne	.+8      	; 0xa4 <main+0x22>
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  a2:	20 c0       	rjmp	.+64     	; 0xe4 <main+0x62>
			else x=x<<1;      // ολίσθηση-περιστροφή του led αριστερά
  a4:	88 0f       	add	r24, r24
  a6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  aa:	1c c0       	rjmp	.+56     	; 0xe4 <main+0x62>
		}
		else if(PINC == 2) {  //  Push Button SW1
  ac:	83 b3       	in	r24, 0x13	; 19
  ae:	82 30       	cpi	r24, 0x02	; 2
  b0:	61 f4       	brne	.+24     	; 0xca <main+0x48>
			if (x==1) x=128;
  b2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  b6:	81 30       	cpi	r24, 0x01	; 1
  b8:	21 f4       	brne	.+8      	; 0xc2 <main+0x40>
  ba:	80 e8       	ldi	r24, 0x80	; 128
  bc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  c0:	11 c0       	rjmp	.+34     	; 0xe4 <main+0x62>
			else x=x>>1;      // ολίσθηση-περιστροφή του led δεξιά
  c2:	86 95       	lsr	r24
  c4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  c8:	0d c0       	rjmp	.+26     	; 0xe4 <main+0x62>
		}
	
		else if(PINC == 4)    // Push Button SW2
  ca:	83 b3       	in	r24, 0x13	; 19
  cc:	84 30       	cpi	r24, 0x04	; 4
  ce:	21 f4       	brne	.+8      	; 0xd8 <main+0x56>
			x=128;			               // output -> MSB
  d0:	80 e8       	ldi	r24, 0x80	; 128
  d2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  d6:	06 c0       	rjmp	.+12     	; 0xe4 <main+0x62>
		
		else if(PINC == 8)    // Push Button SW3
  d8:	83 b3       	in	r24, 0x13	; 19
  da:	88 30       	cpi	r24, 0x08	; 8
  dc:	19 f4       	brne	.+6      	; 0xe4 <main+0x62>
			x=1;                          // output -> 1st LSB	
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	
		while(PINC!=0);                   // waiting to apply changes after release of button
  e4:	83 b3       	in	r24, 0x13	; 19
  e6:	81 11       	cpse	r24, r1
  e8:	fd cf       	rjmp	.-6      	; 0xe4 <main+0x62>
		PORTA = x;            // show output
  ea:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ee:	8b bb       	out	0x1b, r24	; 27

    }
  f0:	ce cf       	rjmp	.-100    	; 0x8e <main+0xc>

000000f2 <_exit>:
  f2:	f8 94       	cli

000000f4 <__stop_program>:
  f4:	ff cf       	rjmp	.-2      	; 0xf4 <__stop_program>
